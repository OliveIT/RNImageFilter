import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { createObj, equals, Interface } from "../fable-core/Util";
import react_native_image_picker from "react-native-image-picker";
import { isNullOrEmpty } from "../fable-core/String";
export const Props = function (__exports) {
  const ImagePickerOptions = __exports.ImagePickerOptions = class ImagePickerOptions {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Helpers.ReactNativeImagePicker.Props.ImagePickerOptions",
        interfaces: ["FSharpUnion", "System.IEquatable", "Fable.Helpers.ReactNativeImagePicker.Props.IImagePickerOptions"],
        cases: [["Title", "string"], ["CancelButtonTitle", "string"], ["TakePhotoButtonTitle", "string"], ["ChooseFromLibraryButtonTitle", "string"], ["CameraType", "string"], ["MediaType", "string"], ["MaxWidth", "number"], ["MaxHeight", "number"], ["Quality", "number"], ["VideoQuality", "string"], ["DurationLimit", "number"], ["Rotation", "number"], ["AllowsEditing", "boolean"], ["NoData", "boolean"], ["StorageOptions", Interface("Fable.Import.ReactNativeImagePicker.StorageOptions")]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Helpers.ReactNativeImagePicker.Props.ImagePickerOptions", ImagePickerOptions);
  return __exports;
}({});
export function showImagePickerAsync(props) {
  return new Promise(function (onSuccess, onError) {
    react_native_image_picker.showImagePicker(createObj(props, 1), function (result) {
      if (!result.didCancel) {
        if (isNullOrEmpty(result.error)) {
          onSuccess(result.uri);
        } else {
          onError(new Error(result.error));
        }
      } else {
        onSuccess(null);
      }
    });
  });
}
export function launchCameraAsync(props) {
  return new Promise(function (onSuccess, onError) {
    react_native_image_picker.launchCamera(createObj(props, 1), function (result) {
      if (!result.didCancel) {
        if (isNullOrEmpty(result.error)) {
          onSuccess(result.uri);
        } else {
          onError(new Error(result.error));
        }
      } else {
        onSuccess(null);
      }
    });
  });
}
export function launchImageLibraryAsync(props) {
  return new Promise(function (onSuccess, onError) {
    react_native_image_picker.launchImageLibrary(createObj(props, 1), function (result) {
      if (!result.didCancel) {
        if (isNullOrEmpty(result.error)) {
          onSuccess(result.uri);
        } else {
          onError(new Error(result.error));
        }
      } else {
        onSuccess(null);
      }
    });
  });
}