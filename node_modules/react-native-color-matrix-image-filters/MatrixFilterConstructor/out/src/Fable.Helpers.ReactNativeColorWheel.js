import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { createObj, extendInfo, Interface, makeGeneric, Unit, Any, Function as _Function } from "../fable-core/Util";
import List from "../fable-core/List";
import { hsvToHex as hsvToHex_1 } from "colorsys";
import { createElement, Component } from "react";
import { getValue, defaultArg } from "../fable-core/Option";
import { ColorWheel } from "react-native-color-wheel";
export const Props = function (__exports) {
  const ColorWheelProps = __exports.ColorWheelProps = class ColorWheelProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Helpers.ReactNativeColorWheel.Props.ColorWheelProps",
        interfaces: ["FSharpUnion"],
        cases: [["InitialColor", "string"], ["OnColorChange", _Function([Any, Unit])], ["OnHexColorChange", _Function(["string", Unit])], ["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["ThumbStyle", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["ThumbSize", "number"], ["Precision", "number"], ["Ref", _Function([Interface("Fable.Import.ReactNativeColorWheel.ColorWheelStatic"), Unit])]]
      };
    }

  };
  setType("Fable.Helpers.ReactNativeColorWheel.Props.ColorWheelProps", ColorWheelProps);
  return __exports;
}({});
const hsvToHex = hsvToHex_1;

class ExtColorWheel extends Component {
  [_Symbol.reflection]() {
    return extendInfo(ExtColorWheel, {
      type: "Fable.Helpers.ReactNativeColorWheel.ExtColorWheel",
      interfaces: [],
      properties: {}
    });
  }

  constructor(props) {
    super(props);
    this.colorWheel = null;
    const objectArg = this;

    this.onColorChange = arg00 => {
      objectArg.OnColorChange(arg00);
    };

    const objectArg_1 = this;

    this.colorWheelRef = arg00_1 => {
      objectArg_1.ColorWheelRef(arg00_1);
    };

    this["init@32-2"] = 1;
  }

  OnColorChange(color) {
    defaultArg(this.props.onColorChange, value => {
      value, void 0;
    })(color);
    defaultArg(this.props.onHexColorChange, value_1 => {
      value_1, void 0;
    })(hsvToHex(color));
  }

  ColorWheelRef(ref) {
    this.colorWheel = ref;
  }

  measureOffset() {
    const matchValue = this.colorWheel;

    if (matchValue == null) {} else {
      getValue(matchValue).measureOffset();
    }
  }

  render() {
    return createElement(ColorWheel, Object.assign({}, this.props, {
      onColorChange: this.onColorChange,
      ref: this.colorWheelRef
    }));
  }

}

setType("Fable.Helpers.ReactNativeColorWheel.ExtColorWheel", ExtColorWheel);
export function colorWheel(props) {
  return createElement(ExtColorWheel, createObj(props, 1));
}