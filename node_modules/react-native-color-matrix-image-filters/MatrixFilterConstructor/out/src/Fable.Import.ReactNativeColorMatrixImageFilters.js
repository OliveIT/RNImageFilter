import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { equals, Tuple, Interface, makeGeneric } from "../fable-core/Util";
import List from "../fable-core/List";
import { achromatomaly as achromatomaly_1, achromatopsia as achromatopsia_1, tritanopia as tritanopia_1, deuteranopia as deuteranopia_1, protanopia as protanopia_1, tritanomaly as tritanomaly_1, deuteranomaly as deuteranomaly_1, protanomaly as protanomaly_1, duoTone as duoTone_1, colorTone as colorTone_1, lsd as lsd_1, predator as predator_1, night as night_1, vintage as vintage_1, browni as browni_1, kodachrome as kodachrome_1, toBGR as toBGR_1, polaroid as polaroid_1, technicolor as technicolor_1, threshold as threshold_1, tint as tint_1, temperature as temperature_1, contrast as contrast_1, brightness as brightness_1, cool as cool_1, warm as warm_1, nightvision as nightvision_1, sepia as sepia_1, grayscale as grayscale_1, invert as invert_1, luminanceToAlpha as luminanceToAlpha_1, hueRotate as hueRotate_1, saturate as saturate_1, rgba as rgba_1, normal as normal_1, concatColorMatrices as concatColorMatrices_1 } from "react-native-color-matrix-image-filters";
export const Props = function (__exports) {
  const ColorMatrixProps = __exports.ColorMatrixProps = class ColorMatrixProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ColorMatrixProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Matrix", Tuple(["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"])]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ColorMatrixProps", ColorMatrixProps);
  const NormalProps = __exports.NormalProps = class NormalProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.NormalProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.NormalProps", NormalProps);
  const RGBAProps = __exports.RGBAProps = class RGBAProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.RGBAProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Red", "number"], ["Green", "number"], ["Blue", "number"], ["Alpha", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.RGBAProps", RGBAProps);
  const SaturateProps = __exports.SaturateProps = class SaturateProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.SaturateProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.SaturateProps", SaturateProps);
  const HueRotateProps = __exports.HueRotateProps = class HueRotateProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.HueRotateProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.HueRotateProps", HueRotateProps);
  const LuminanceToAlphaProps = __exports.LuminanceToAlphaProps = class LuminanceToAlphaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.LuminanceToAlphaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.LuminanceToAlphaProps", LuminanceToAlphaProps);
  const InvertProps = __exports.InvertProps = class InvertProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.InvertProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.InvertProps", InvertProps);
  const GrayscaleProps = __exports.GrayscaleProps = class GrayscaleProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.GrayscaleProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.GrayscaleProps", GrayscaleProps);
  const SepiaProps = __exports.SepiaProps = class SepiaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.SepiaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.SepiaProps", SepiaProps);
  const NightvisionProps = __exports.NightvisionProps = class NightvisionProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.NightvisionProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.NightvisionProps", NightvisionProps);
  const WarmProps = __exports.WarmProps = class WarmProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.WarmProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.WarmProps", WarmProps);
  const CoolProps = __exports.CoolProps = class CoolProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.CoolProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.CoolProps", CoolProps);
  const BrightnessProps = __exports.BrightnessProps = class BrightnessProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.BrightnessProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.BrightnessProps", BrightnessProps);
  const ContrastProps = __exports.ContrastProps = class ContrastProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ContrastProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ContrastProps", ContrastProps);
  const TemperatureProps = __exports.TemperatureProps = class TemperatureProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.TemperatureProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.TemperatureProps", TemperatureProps);
  const TintProps = __exports.TintProps = class TintProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.TintProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.TintProps", TintProps);
  const ThresholdProps = __exports.ThresholdProps = class ThresholdProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ThresholdProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ThresholdProps", ThresholdProps);
  const TechnicolorProps = __exports.TechnicolorProps = class TechnicolorProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.TechnicolorProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.TechnicolorProps", TechnicolorProps);
  const PolaroidProps = __exports.PolaroidProps = class PolaroidProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.PolaroidProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.PolaroidProps", PolaroidProps);
  const ToBGRProps = __exports.ToBGRProps = class ToBGRProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ToBGRProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ToBGRProps", ToBGRProps);
  const KodachromeProps = __exports.KodachromeProps = class KodachromeProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.KodachromeProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.KodachromeProps", KodachromeProps);
  const BrowniProps = __exports.BrowniProps = class BrowniProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.BrowniProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.BrowniProps", BrowniProps);
  const VintageProps = __exports.VintageProps = class VintageProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.VintageProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.VintageProps", VintageProps);
  const NightProps = __exports.NightProps = class NightProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.NightProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.NightProps", NightProps);
  const PredatorProps = __exports.PredatorProps = class PredatorProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.PredatorProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["Amount", "number"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.PredatorProps", PredatorProps);
  const LsdProps = __exports.LsdProps = class LsdProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.LsdProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.LsdProps", LsdProps);
  const ColorToneProps = __exports.ColorToneProps = class ColorToneProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ColorToneProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Desaturation", "number"], ["Toned", "number"], ["LightColor", "string"], ["DarkColor", "string"], ["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ColorToneProps", ColorToneProps);
  const DuoToneProps = __exports.DuoToneProps = class DuoToneProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.DuoToneProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })], ["FirstColor", "string"], ["SecondColor", "string"]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.DuoToneProps", DuoToneProps);
  const ProtanomalyProps = __exports.ProtanomalyProps = class ProtanomalyProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ProtanomalyProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ProtanomalyProps", ProtanomalyProps);
  const DeuteranomalyProps = __exports.DeuteranomalyProps = class DeuteranomalyProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.DeuteranomalyProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.DeuteranomalyProps", DeuteranomalyProps);
  const TritanomalyProps = __exports.TritanomalyProps = class TritanomalyProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.TritanomalyProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.TritanomalyProps", TritanomalyProps);
  const ProtanopiaProps = __exports.ProtanopiaProps = class ProtanopiaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.ProtanopiaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.ProtanopiaProps", ProtanopiaProps);
  const DeuteranopiaProps = __exports.DeuteranopiaProps = class DeuteranopiaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.DeuteranopiaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.DeuteranopiaProps", DeuteranopiaProps);
  const TritanopiaProps = __exports.TritanopiaProps = class TritanopiaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.TritanopiaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.TritanopiaProps", TritanopiaProps);
  const AchromatopsiaProps = __exports.AchromatopsiaProps = class AchromatopsiaProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.AchromatopsiaProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.AchromatopsiaProps", AchromatopsiaProps);
  const AchromatomalyProps = __exports.AchromatomalyProps = class AchromatomalyProps {
    constructor(tag, data) {
      this.tag = tag | 0;
      this.data = data;
    }

    [_Symbol.reflection]() {
      return {
        type: "Fable.Import.ReactNativeColorMatrixImageFilters.Props.AchromatomalyProps",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: [["Style", makeGeneric(List, {
          T: Interface("Fable.Helpers.ReactNative.Props.IStyle")
        })]]
      };
    }

    Equals(other) {
      return this === other || this.tag === other.tag && equals(this.data, other.data);
    }

  };
  setType("Fable.Import.ReactNativeColorMatrixImageFilters.Props.AchromatomalyProps", AchromatomalyProps);
  return __exports;
}({});
export const concatColorMatrices = concatColorMatrices_1;
export const normal = normal_1;
export const rgba = rgba_1;
export const saturate = saturate_1;
export const hueRotate = hueRotate_1;
export const luminanceToAlpha = luminanceToAlpha_1;
export const invert = invert_1;
export const grayscale = grayscale_1;
export const sepia = sepia_1;
export const nightvision = nightvision_1;
export const warm = warm_1;
export const cool = cool_1;
export const brightness = brightness_1;
export const contrast = contrast_1;
export const temperature = temperature_1;
export const tint = tint_1;
export const threshold = threshold_1;
export const technicolor = technicolor_1;
export const polaroid = polaroid_1;
export const toBGR = toBGR_1;
export const kodachrome = kodachrome_1;
export const browni = browni_1;
export const vintage = vintage_1;
export const night = night_1;
export const predator = predator_1;
export const lsd = lsd_1;
export const colorTone = colorTone_1;
export const duoTone = duoTone_1;
export const protanomaly = protanomaly_1;
export const deuteranomaly = deuteranomaly_1;
export const tritanomaly = tritanomaly_1;
export const protanopia = protanopia_1;
export const deuteranopia = deuteranopia_1;
export const tritanopia = tritanopia_1;
export const achromatopsia = achromatopsia_1;
export const achromatomaly = achromatomaly_1;