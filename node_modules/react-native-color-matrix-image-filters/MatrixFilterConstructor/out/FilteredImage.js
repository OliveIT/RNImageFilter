import { setType } from "./fable-core/Symbol";
import _Symbol from "./fable-core/Symbol";
import { createObj, equals, equalsRecords, Tuple, makeGeneric, comparePrimitives } from "./fable-core/Util";
import { source, Model as Model_1 } from "./Image";
import { filter as filter_2, map as map_1, ofArray, append } from "./fable-core/List";
import List from "./fable-core/List";
import { controls, matrix, init as init_1, Model as Model_2 } from "./Filters/CombinedFilter";
import { update as update_1, Message as Message_3, Input } from "./Filters/Filter";
import { Shape } from "./FilterInputs/CombinedFilterInput";
import { Model as Model_3 } from "./FilterInputs/FilterRangeInput";
import { Model as Model_4 } from "./FilterInputs/FilterColorInput";
import { Model as Model_5 } from "./FilterInputs/AnimatedFilterRangeInput";
import { view as view_1, Message as Message_1 } from "./ImageSelectModal";
import { Message as Message_2 } from "./SelectModal";
import { map } from "./fable-core/Array";
import { getValue, defaultArg } from "./fable-core/Option";
import { findIndex, tryFind, tryFindIndex } from "./fable-core/Seq";
import { Platform, Props, Alert } from "./fable/Fable.Helpers.ReactNative";
import { Cmd } from "./fable/cmd";
import { moveDownAt, moveUpAt, configureNextLayoutAnimation } from "./Utils";
import { SegmentedControlIOS, Image, ActivityIndicator, Text as _Text, Button, View, Clipboard } from "react-native";
import { run } from "./JSGenerator";
import { animatedFilterPortal, commonFilterPortal, imagePortal, imageHeight } from "./Constants";
import { concatColorMatrices, normal } from "./src/Fable.Import.ReactNativeColorMatrixImageFilters";
import { Fragment, createElement } from "react";
import { BlackPortal } from "react-native-portal";
import { animated, common } from "./FilterSelectModal";
import { view as view_2 } from "./Spacer";
import { ColorMatrix } from "react-native-color-matrix-image-filters";
import react_native_segmented_control_tab from "react-native-segmented-control-tab";
export class Loading {
  constructor(tag) {
    this.tag = tag | 0;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilteredImage.Loading",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["InProgress"], ["Failed"], ["Done"]]
    };
  }

  Equals(other) {
    return this.tag === other.tag;
  }

  CompareTo(other) {
    return comparePrimitives(this.tag, other.tag);
  }

}
setType("MatrixFilterConstructor.FilteredImage.Loading", Loading);
export class Model {
  constructor(image, filters, imageSelectModalIsVisible, commonFilterSelectModalIsVisible, animatedFilterSelectModalIsVisible, selectedResizeMode, loadingStatus, nextId) {
    this.Image = image;
    this.Filters = filters;
    this.ImageSelectModalIsVisible = imageSelectModalIsVisible;
    this.CommonFilterSelectModalIsVisible = commonFilterSelectModalIsVisible;
    this.AnimatedFilterSelectModalIsVisible = animatedFilterSelectModalIsVisible;
    this.SelectedResizeMode = selectedResizeMode;
    this.LoadingStatus = loadingStatus;
    this.NextId = nextId | 0;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilteredImage.Model",
      interfaces: ["FSharpRecord", "System.IEquatable"],
      properties: {
        Image: Model_1,
        Filters: makeGeneric(List, {
          T: Tuple(["number", Model_2, makeGeneric(List, {
            T: Tuple([Input, makeGeneric(Shape, {
              range: Model_3,
              color: Model_4,
              animated: Model_5
            })])
          })])
        }),
        ImageSelectModalIsVisible: "boolean",
        CommonFilterSelectModalIsVisible: "boolean",
        AnimatedFilterSelectModalIsVisible: "boolean",
        SelectedResizeMode: "string",
        LoadingStatus: Loading,
        NextId: "number"
      }
    };
  }

  Equals(other) {
    return equalsRecords(this, other);
  }

}
setType("MatrixFilterConstructor.FilteredImage.Model", Model);
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilteredImage.Message",
      interfaces: ["FSharpUnion", "System.IEquatable"],
      cases: [["Delete"], ["SelectImage"], ["SetImage", Model_1], ["ImageSelectModalMessage", Message_1], ["SelectCommonFilter"], ["SelectAnimatedFilter"], ["FilterSelectModalMessage", makeGeneric(Message_2, {
        a: Model_2
      })], ["FilterMessage", "number", Message_3], ["ResizeModeChanged", "number"], ["CopyCode"], ["ImageLoadingStarted"], ["ImageLoadingSucceed"], ["ImageLoadingFailed"], ["Tick"]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals(this.data, other.data);
  }

}
setType("MatrixFilterConstructor.FilteredImage.Message", Message);
const resizeModes = ["contain", "cover", "stretch", "center", "repeat"];
const resizeControlValues = Array.from(map(function (value) {
  return value;
}, resizeModes, Array));
export function init(image) {
  return new Model(image, new List(), false, false, false, "contain", new Loading(2), 0);
}

function resizeControlIndex(model) {
  return defaultArg(tryFindIndex(function (x) {
    return x === model.SelectedResizeMode;
  }, resizeModes), 0) | 0;
}

export function update(message, model) {
  var Filters;
  var NextId;
  var SelectedResizeMode;
  var objectArg;
  var LoadingStatus;
  var LoadingStatus_1;
  var LoadingStatus_2;

  switch (message.tag) {
    case 1:
      return [new Model(model.Image, model.Filters, true, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];

    case 2:
      return [new Model(message.data, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];

    case 3:
      if (message.data.tag === 3) {
        return [model, new List()];
      } else if (message.data.tag === 2) {
        Alert.alert("Error", message.data.data, new List());
        return [model, new List()];
      } else if (message.data.tag === 0) {
        return [new Model(model.Image, model.Filters, false, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];
      } else {
        return [model, Cmd.ofMsg(new Message(2, message.data.data))];
      }

    case 4:
      return [new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, true, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];

    case 5:
      return [new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, true, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];

    case 6:
      if (message.data.tag === 0) {
        return [new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, false, false, model.SelectedResizeMode, model.LoadingStatus, model.NextId), new List()];
      } else {
        const filter = message.data.data.data;
        configureNextLayoutAnimation();
        return [(Filters = append(model.Filters, ofArray([[model.NextId, filter, init_1(filter)]])), NextId = model.NextId + 1 | 0, new Model(model.Image, Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, NextId)), new List()];
      }

    case 7:
      const matchValue = tryFind(function (tupledArg) {
        return tupledArg[0] === message.data[0];
      }, model.Filters);

      if (matchValue != null) {
        const filter_1 = getValue(matchValue)[2];
        const patternInput = update_1(message.data[1], filter_1);
        const filters = map_1(function (tupledArg_1) {
          return [tupledArg_1[0], tupledArg_1[1], tupledArg_1[0] === message.data[0] ? patternInput[0] : tupledArg_1[2]];
        }, model.Filters);
        let filters_;

        if (message.data[1].tag === 3) {
          configureNextLayoutAnimation();
          filters_ = filter_2(function (tupledArg_2) {
            return tupledArg_2[0] !== message.data[0];
          }, filters);
        } else if (message.data[1].tag === 2) {
          configureNextLayoutAnimation();
          filters_ = moveUpAt(findIndex(function (tupledArg_3) {
            return tupledArg_3[0] === message.data[0];
          }, filters), filters);
        } else if (message.data[1].tag === 1) {
          configureNextLayoutAnimation();
          filters_ = moveDownAt(findIndex(function (tupledArg_4) {
            return tupledArg_4[0] === message.data[0];
          }, filters), filters);
        } else {
          filters_ = filters;
        }

        return [new Model(model.Image, filters_, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, model.LoadingStatus, model.NextId), Cmd.map(function (sub) {
          return new Message(7, [message.data[0], sub]);
        }, patternInput[1])];
      } else {
        return [model, new List()];
      }

    case 8:
      return [(SelectedResizeMode = resizeModes[message.data], new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, SelectedResizeMode, model.LoadingStatus, model.NextId)), new List()];

    case 9:
      (objectArg = Clipboard, objectArg.setString.bind(objectArg))(run(map_1(function (tupledArg_5) {
        return [tupledArg_5[1], tupledArg_5[2]];
      }, model.Filters)));
      Alert.alert("Info", "JS code copied to clipboard", new List());
      return [model, new List()];

    case 10:
      return [(LoadingStatus = new Loading(0), new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, LoadingStatus, model.NextId)), new List()];

    case 11:
      return [(LoadingStatus_1 = new Loading(2), new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, LoadingStatus_1, model.NextId)), new List()];

    case 12:
      return [(LoadingStatus_2 = new Loading(1), new Model(model.Image, model.Filters, model.ImageSelectModalIsVisible, model.CommonFilterSelectModalIsVisible, model.AnimatedFilterSelectModalIsVisible, model.SelectedResizeMode, LoadingStatus_2, model.NextId)), new List()];

    case 13:
      return [model, Cmd.batch(map_1(function (tupledArg_6) {
        return Cmd.map(function (sub_1) {
          return new Message(7, [tupledArg_6[0], sub_1]);
        }, Cmd.ofMsg(new Message_3(4)));
      }, model.Filters))];

    default:
      return [model, new List()];
  }
}
const containerStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(30, 5), new Props.FlexStyle(37, 5), new Props.ImageStyle(6, 2), new Props.ImageStyle(7, 3), new Props.ImageStyle(4, "white")]));
const imageStyle = new Props.ImageProperties(9, ofArray([new Props.FlexStyle(24, 5), new Props.FlexStyle(50, 100 + "%"), new Props.FlexStyle(20, imageHeight)]));
const controlsStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(30, 10), new Props.FlexStyle(16, "row"), new Props.FlexStyle(21, "space-between")]));
const spinnerStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(46, "absolute"), new Props.FlexStyle(50, 100 + "%"), new Props.FlexStyle(20, 100 + "%"), new Props.FlexStyle(21, "center"), new Props.FlexStyle(1, "center")]));
const filterContainerStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(16, "column-reverse")]));

function combinedMatrix(model) {
  return function (_arg1) {
    return (_arg1 != null ? _arg1.length === 0 : false) ? normal() : concatColorMatrices(_arg1);
  }(Array.from(map_1(function (tupledArg) {
    return matrix(tupledArg[1], tupledArg[2]);
  }, model.Filters)));
}

export function view(model, dispatch) {
  var matchValue;
  return createElement(Fragment, {}, function (name, children) {
    return createElement(BlackPortal, {
      name: name
    }, ...children);
  }(imagePortal, ofArray([view_1(model.Image, model.ImageSelectModalIsVisible, $var1 => dispatch(function (arg0) {
    return new Message(3, arg0);
  }($var1)))])), function (name_1, children_1) {
    return createElement(BlackPortal, {
      name: name_1
    }, ...children_1);
  }(commonFilterPortal, ofArray([common(model.CommonFilterSelectModalIsVisible, $var2 => dispatch(function (arg0_1) {
    return new Message(6, arg0_1);
  }($var2)))])), function (name_2, children_2) {
    return createElement(BlackPortal, {
      name: name_2
    }, ...children_2);
  }(animatedFilterPortal, ofArray([animated(model.AnimatedFilterSelectModalIsVisible, $var3 => dispatch(function (arg0_2) {
    return new Message(6, arg0_2);
  }($var3)))])), createElement(View, createObj(ofArray([containerStyle, new Props.ActivityIndicator.ActivityIndicatorProperties(3, "large")]), 1), createElement(Button, {
    title: "Add filter",
    onPress: function () {
      dispatch(new Message(4));
    }
  }), view_2, createElement(Button, {
    title: "Add animated filter",
    onPress: function () {
      dispatch(new Message(5));
    }
  }), view_2, createElement(View, createObj(ofArray([filterContainerStyle]), 1), ...map_1(function (tupledArg) {
    return createElement(Fragment, {
      key: tupledArg[0].toString()
    }, controls(tupledArg[1])(tupledArg[2], function (msg) {
      dispatch(new Message(7, [tupledArg[0], msg]));
    }));
  }, model.Filters)), createElement(View, {}, model.LoadingStatus.tag === 2 ? createElement(Fragment, {}) : model.LoadingStatus.tag === 1 ? createElement(View, createObj(ofArray([spinnerStyle]), 1), createElement(_Text, {}, "🚫")) : createElement(ActivityIndicator, createObj(ofArray([spinnerStyle]), 1)), (matchValue = source(model.Image), matchValue != null ? createElement(ColorMatrix, {
    matrix: combinedMatrix(model)
  }, createElement(Image, createObj(ofArray([imageStyle, new Props.ImageProperties(5, function () {
    dispatch(new Message(10));
  }), new Props.ImageProperties(3, function () {
    dispatch(new Message(11));
  }), new Props.ImageProperties(6, function (_arg5) {
    dispatch(new Message(12));
  }), new Props.ImageProperties(7, model.SelectedResizeMode), new Props.ImageProperties(8, getValue(matchValue))]), 1))) : createElement(Fragment, {}))), Platform.select(ofArray([new Platform.OS(1, createElement(react_native_segmented_control_tab, {
    values: resizeControlValues,
    onTabPress: $var4 => dispatch(function (arg0_3) {
      return new Message(8, arg0_3);
    }($var4)),
    selectedIndex: resizeControlIndex(model)
  })), new Platform.OS(0, createElement(SegmentedControlIOS, {
    values: resizeControlValues,
    onChange: function (event) {
      dispatch(new Message(8, event.nativeEvent.selectedSegmentIndex));
    },
    selectedIndex: resizeControlIndex(model)
  }))])), createElement(View, createObj(ofArray([controlsStyle]), 1), createElement(Button, {
    title: "Copy JS",
    onPress: function () {
      dispatch(new Message(9));
    }
  }), createElement(Button, {
    title: "Change image",
    onPress: function () {
      dispatch(new Message(1));
    }
  }), createElement(Button, {
    title: "Delete",
    color: "red",
    onPress: function () {
      dispatch(new Message(0));
    }
  }))));
}