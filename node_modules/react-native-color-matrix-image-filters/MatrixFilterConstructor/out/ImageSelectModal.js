import { setType } from "./fable-core/Symbol";
import _Symbol from "./fable-core/Symbol";
import { name, availableImages, random, fromPicker, Model } from "./Image";
import { equals } from "./fable-core/Util";
import { fold } from "./fable-core/Seq";
import { defaultArg } from "./fable-core/Option";
import { showImagePickerAsync } from "./react-native-image-picker/Fable.Helpers.ReactNativeImagePicker";
import List from "./fable-core/List";
import { view as view_1 } from "./SelectModal";
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.ImageSelectModal.Message",
      interfaces: ["FSharpUnion", "System.IEquatable"],
      cases: [["Hide"], ["ImageSelectionSucceed", Model], ["ImageSelectionFailed", "string"], ["ImageSelectionCancelled"]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals(this.data, other.data);
  }

}
setType("MatrixFilterConstructor.ImageSelectModal.Message", Message);
export function view(image, isVisible, dispatch) {
  const dispatch_ = function (_arg1) {
    var fail;
    var folder;
    var state;

    if (_arg1.tag === 0) {
      dispatch(new Message(0));
    } else if (_arg1.data.data.tag === 0) {
      dispatch(new Message(1, new Model(0, _arg1.data.data.data)));
    } else if (_arg1.data.data.tag === 2) {
      (fail = function (e) {
        dispatch(new Message(2, e.message));
      }, function (pr) {
        pr.then(dispatch, fail);
      })(showImagePickerAsync(new List()).then((folder = function (_arg1_1, uri) {
        return new Message(1, fromPicker({
          uri: uri
        }));
      }, state = new Message(3), function (option) {
        return fold(folder, state, defaultArg(option, [], $var1 => [$var1]));
      })));
    } else {
      dispatch(new Message(1, random()));
    }
  };

  return view_1(availableImages, image, name, function (x, y) {
    return x.Equals(y);
  }, isVisible, dispatch_);
}