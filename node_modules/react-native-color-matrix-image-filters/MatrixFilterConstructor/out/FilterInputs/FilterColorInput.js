import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { createObj, equals, equalsRecords, Interface, Option } from "../fable-core/Util";
import { ofArray } from "../fable-core/List";
import List from "../fable-core/List";
import { Props } from "../fable/Fable.Helpers.ReactNative";
import { colorWheel, Props as Props_1 } from "../src/Fable.Helpers.ReactNativeColorWheel";
import { createElement } from "react";
import { Text as _Text, View } from "react-native";
import { printf, toText } from "../fable-core/String";
import { Common } from "../fable/common";
export class Model {
  constructor(name, value, colorWheelRef) {
    this.Name = name;
    this.Value = value;
    this.ColorWheelRef = colorWheelRef;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilterColorInput.Model",
      interfaces: ["FSharpRecord", "System.IEquatable"],
      properties: {
        Name: "string",
        Value: "string",
        ColorWheelRef: Option(Interface("Fable.Import.ReactNativeColorWheel.ColorWheelStatic"))
      }
    };
  }

  Equals(other) {
    return equalsRecords(this, other);
  }

}
setType("MatrixFilterConstructor.FilterColorInput.Model", Model);
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilterColorInput.Message",
      interfaces: ["FSharpUnion", "System.IEquatable"],
      cases: [["ValueChanged", "string"], ["ColorWheelRefChanged", Interface("Fable.Import.ReactNativeColorWheel.ColorWheelStatic")]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals(this.data, other.data);
  }

}
setType("MatrixFilterConstructor.FilterColorInput.Message", Message);
export function init(name, initial) {
  return new Model(name, initial, null);
}
export function update(message, model) {
  var ColorWheelRef;

  if (message.tag === 1) {
    return [(ColorWheelRef = message.data, new Model(model.Name, model.Value, ColorWheelRef)), new List()];
  } else {
    return [new Model(model.Name, message.data, model.ColorWheelRef), new List()];
  }
}
const containerStyle = new Props.ViewProperties(8, ofArray([new Props.ImageStyle(6, 1), new Props.ImageStyle(7, 3), new Props.FlexStyle(37, 3), new Props.FlexStyle(24, 3), new Props.ImageStyle(4, "white")]));
const colorWheelStyle = new Props_1.ColorWheelProps(3, ofArray([new Props.FlexStyle(50, 235), new Props.FlexStyle(20, 200), new Props.FlexStyle(2, "center"), new Props.FlexStyle(14, 1)]));
export function view(model, dispatch) {
  const wheel = function () {
    return colorWheel(ofArray([colorWheelStyle, new Props_1.ColorWheelProps(7, $var1 => dispatch(function (arg0) {
      return new Message(1, arg0);
    }($var1))), new Props_1.ColorWheelProps(0, model.Value), new Props_1.ColorWheelProps(6, 10), new Props_1.ColorWheelProps(2, $var2 => dispatch(function (arg0_1) {
      return new Message(0, arg0_1);
    }($var2)))]));
  };

  return createElement(View, createObj(ofArray([containerStyle]), 1), createElement(_Text, {}, toText(printf("%s %s"))(model.Name, model.Value)), Common.lazyView(wheel)());
}