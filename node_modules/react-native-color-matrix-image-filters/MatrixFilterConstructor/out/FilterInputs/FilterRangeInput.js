import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { createObj, compareUnions, equals, compareRecords, equalsRecords } from "../fable-core/Util";
import { ofArray } from "../fable-core/List";
import List from "../fable-core/List";
import { Platform, Props } from "../fable/Fable.Helpers.ReactNative";
import { Props as Props_1 } from "../src/Fable.Import.ReactNativeSlider";
import { createElement } from "react";
import { Slider, Text as _Text, View } from "react-native";
import { printf, toText } from "../fable-core/String";
import react_native_slider from "react-native-slider";
import { Common } from "../fable/common";
export class Model {
  constructor(value, min, max, name) {
    this.Value = value;
    this.Min = min;
    this.Max = max;
    this.Name = name;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilterRangeInput.Model",
      interfaces: ["FSharpRecord", "System.IEquatable", "System.IComparable"],
      properties: {
        Value: "number",
        Min: "number",
        Max: "number",
        Name: "string"
      }
    };
  }

  Equals(other) {
    return equalsRecords(this, other);
  }

  CompareTo(other) {
    return compareRecords(this, other) | 0;
  }

}
setType("MatrixFilterConstructor.FilterRangeInput.Model", Model);
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.FilterRangeInput.Message",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["ValueChanged", "number"]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals(this.data, other.data);
  }

  CompareTo(other) {
    return compareUnions(this, other) | 0;
  }

}
setType("MatrixFilterConstructor.FilterRangeInput.Message", Message);
export function init(name, min, max, initial) {
  return new Model(initial, min, max, name);
}
export function update(message, model) {
  return [new Model(message.data, model.Min, model.Max, model.Name), new List()];
}
const containerStyle = new Props.ViewProperties(8, ofArray([new Props.ImageStyle(6, 1), new Props.ImageStyle(7, 3), new Props.FlexStyle(37, 3), new Props.FlexStyle(24, 3), new Props.ImageStyle(4, "white")]));
const rangeLegendStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(16, "row"), new Props.FlexStyle(21, "space-between")]));
const thumbStyle = new Props_1.SliderProps(14, ofArray([new Props.ViewStyle(25, "black"), new Props.ViewStyle(28, 1), new Props.ViewStyle(27, 1), new Props.ViewStyle(26, new Props.ShadowOffset(0, 0)), new Props.ImageStyle(4, "white"), new Props.ViewStyle(29, 2)]));
export function disabledView(model) {
  return createElement(View, createObj(ofArray([containerStyle]), 1), createElement(_Text, {}, toText(printf("%s %.2f"))(model.Name, model.Value)), Platform.select(ofArray([new Platform.OS(1, createElement(Slider, {
    maximumValue: model.Max,
    minimumValue: model.Min,
    disabled: true,
    value: model.Value
  })), new Platform.OS(0, createElement(react_native_slider, createObj(ofArray([thumbStyle, new Props_1.SliderProps(3, model.Max), new Props_1.SliderProps(2, model.Min), new Props_1.SliderProps(0, model.Value), new Props_1.SliderProps(1, true), new Props_1.SliderProps(5, "gray")]), 1)))])), createElement(View, createObj(ofArray([rangeLegendStyle]), 1), createElement(_Text, {}, toText(printf("%.2f"))(model.Min)), createElement(_Text, {}, toText(printf("%.2f"))(model.Max))));
}
export function view(model, dispatch) {
  const slider = function () {
    return Platform.select(ofArray([new Platform.OS(1, createElement(Slider, {
      maximumValue: model.Max,
      minimumValue: model.Min,
      value: model.Value,
      onValueChange: $var1 => dispatch(function (arg0) {
        return new Message(0, arg0);
      }($var1))
    })), new Platform.OS(0, createElement(react_native_slider, createObj(ofArray([thumbStyle, new Props_1.SliderProps(3, model.Max), new Props_1.SliderProps(2, model.Min), new Props_1.SliderProps(0, model.Value), new Props_1.SliderProps(5, "#007aff"), new Props_1.SliderProps(9, $var2 => dispatch(function (arg0_1) {
      return new Message(0, arg0_1);
    }($var2)))]), 1)))]));
  };

  return createElement(View, createObj(ofArray([containerStyle]), 1), createElement(_Text, {}, toText(printf("%s %.2f"))(model.Name, model.Value)), Common.lazyView(slider)(), createElement(View, createObj(ofArray([rangeLegendStyle]), 1), createElement(_Text, {}, toText(printf("%.2f"))(model.Min)), createElement(_Text, {}, toText(printf("%.2f"))(model.Max))));
}