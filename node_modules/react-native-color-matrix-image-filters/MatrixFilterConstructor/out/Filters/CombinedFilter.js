import { setType } from "../fable-core/Symbol";
import _Symbol from "../fable-core/Symbol";
import { comparePrimitives } from "../fable-core/Util";
import CurriedLambda from "../fable-core/CurriedLambda";
import { printf, toText } from "../fable-core/String";
import { controls as controls_1, Input, init as init_1 } from "./Filter";
import { ofArray } from "../fable-core/List";
import List from "../fable-core/List";
import { initAnimated, initColor, initRange } from "../FilterInputs/CombinedFilterInput";
import { achromatomaly, achromatopsia, tritanopia, deuteranopia, protanopia, tritanomaly, deuteranomaly, protanomaly, duoTone, colorTone, lsd, predator, night, vintage, browni, kodachrome, toBGR, polaroid, technicolor, threshold, tint, temperature, contrast, brightness, cool, warm, nightvision, sepia, grayscale, invert, luminanceToAlpha, hueRotate, saturate, rgba, normal } from "../src/Fable.Import.ReactNativeColorMatrixImageFilters";
export class Model {
  constructor(tag) {
    this.tag = tag | 0;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.CombinedFilter.Model",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["Normal"], ["RGBA"], ["Saturate"], ["HueRotate"], ["LuminanceToAlpha"], ["Invert"], ["Grayscale"], ["Sepia"], ["Nightvision"], ["Warm"], ["Cool"], ["Brightness"], ["Contrast"], ["Temperature"], ["Tint"], ["Threshold"], ["Technicolor"], ["Polaroid"], ["ToBGR"], ["Kodachrome"], ["Browni"], ["Vintage"], ["Night"], ["Predator"], ["Lsd"], ["ColorTone"], ["DuoTone"], ["Protanomaly"], ["Deuteranomaly"], ["Tritanomaly"], ["Protanopia"], ["Deuteranopia"], ["Tritanopia"], ["Achromatopsia"], ["Achromatomaly"], ["AnimatedSaturate"], ["AnimatedHueRotate"], ["AnimatedBrightness"], ["AnimatedContrast"], ["AnimatedTemperature"], ["AnimatedTint"], ["AnimatedThreshold"], ["AnimatedNight"], ["AnimatedPredator"]]
    };
  }

  Equals(other) {
    return this.tag === other.tag;
  }

  CompareTo(other) {
    return comparePrimitives(this.tag, other.tag);
  }

}
setType("MatrixFilterConstructor.CombinedFilter.Model", Model);
export const name = CurriedLambda(toText(printf("%A")));
export function init(model) {
  switch (model.tag) {
    case 1:
      return init_1(ofArray([[new Input(5), function (name_1) {
        return initRange(0, 5, 1, name_1);
      }], [new Input(6), function (name_2) {
        return initRange(0, 5, 1, name_2);
      }], [new Input(7), function (name_3) {
        return initRange(0, 5, 1, name_3);
      }], [new Input(8), function (name_4) {
        return initRange(0, 5, 1, name_4);
      }]]));

    case 2:
      return init_1(ofArray([[new Input(0), function (name_5) {
        return initRange(-10, 10, 1, name_5);
      }]]));

    case 3:
      return init_1(ofArray([[new Input(0), function (name_6) {
        return initRange(-10, 10, 0, name_6);
      }]]));

    case 4:
      return init_1(new List());

    case 5:
      return init_1(new List());

    case 6:
      return init_1(ofArray([[new Input(0), function (name_7) {
        return initRange(0, 1, 1, name_7);
      }]]));

    case 7:
      return init_1(ofArray([[new Input(0), function (name_8) {
        return initRange(0, 1, 1, name_8);
      }]]));

    case 8:
      return init_1(new List());

    case 9:
      return init_1(new List());

    case 10:
      return init_1(new List());

    case 11:
      return init_1(ofArray([[new Input(0), function (name_9) {
        return initRange(-10, 10, 1, name_9);
      }]]));

    case 12:
      return init_1(ofArray([[new Input(0), function (name_10) {
        return initRange(-10, 10, 1, name_10);
      }]]));

    case 13:
      return init_1(ofArray([[new Input(0), function (name_11) {
        return initRange(-10, 10, 1, name_11);
      }]]));

    case 14:
      return init_1(ofArray([[new Input(0), function (name_12) {
        return initRange(-10, 10, 0, name_12);
      }]]));

    case 15:
      return init_1(ofArray([[new Input(0), function (name_13) {
        return initRange(-10, 10, 1, name_13);
      }]]));

    case 16:
      return init_1(new List());

    case 17:
      return init_1(new List());

    case 18:
      return init_1(new List());

    case 19:
      return init_1(new List());

    case 20:
      return init_1(new List());

    case 21:
      return init_1(new List());

    case 22:
      return init_1(ofArray([[new Input(0), function (name_14) {
        return initRange(-10, 10, 0.1, name_14);
      }]]));

    case 23:
      return init_1(ofArray([[new Input(0), function (name_15) {
        return initRange(-10, 10, 1, name_15);
      }]]));

    case 24:
      return init_1(new List());

    case 25:
      return init_1(ofArray([[new Input(1), function (name_16) {
        return initRange(-10, 10, 0.2, name_16);
      }], [new Input(2), function (name_17) {
        return initRange(-10, 10, 1.5, name_17);
      }], [new Input(3), function (name_18) {
        return initColor("#ffe580", name_18);
      }], [new Input(4), function (name_19) {
        return initColor("#338000", name_19);
      }]]));

    case 26:
      return init_1(ofArray([[new Input(9), function (name_20) {
        return initColor("#ffe580", name_20);
      }], [new Input(10), function (name_21) {
        return initColor("#338000", name_21);
      }]]));

    case 27:
      return init_1(new List());

    case 28:
      return init_1(new List());

    case 29:
      return init_1(new List());

    case 30:
      return init_1(new List());

    case 31:
      return init_1(new List());

    case 32:
      return init_1(new List());

    case 33:
      return init_1(new List());

    case 34:
      return init_1(new List());

    case 35:
      return init_1(ofArray([[new Input(0), function (name_22) {
        return initAnimated(-10, 10, 1, name_22);
      }]]));

    case 36:
      return init_1(ofArray([[new Input(0), function (name_23) {
        return initAnimated(-10, 10, 0, name_23);
      }]]));

    case 37:
      return init_1(ofArray([[new Input(0), function (name_24) {
        return initAnimated(-100, 100, 0, name_24);
      }]]));

    case 38:
      return init_1(ofArray([[new Input(0), function (name_25) {
        return initAnimated(-10, 10, 1, name_25);
      }]]));

    case 39:
      return init_1(ofArray([[new Input(0), function (name_26) {
        return initAnimated(-10, 10, 1, name_26);
      }]]));

    case 40:
      return init_1(ofArray([[new Input(0), function (name_27) {
        return initAnimated(-10, 10, 0, name_27);
      }]]));

    case 41:
      return init_1(ofArray([[new Input(0), function (name_28) {
        return initAnimated(-100, 100, 0, name_28);
      }]]));

    case 42:
      return init_1(ofArray([[new Input(0), function (name_29) {
        return initAnimated(-10, 10, 0.1, name_29);
      }]]));

    case 43:
      return init_1(ofArray([[new Input(0), function (name_30) {
        return initAnimated(-10, 10, 1, name_30);
      }]]));

    default:
      return init_1(new List());
  }
}
export function matrix(control, model) {
  const matchValue = [control, model];
  const $var1 = matchValue[0].tag === 1 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 5 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 6 ? matchValue[1].tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail != null ? matchValue[1].tail.tail.head[0].tag === 7 ? matchValue[1].tail.tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail.tail != null ? matchValue[1].tail.tail.tail.head[0].tag === 8 ? matchValue[1].tail.tail.tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail.tail.tail == null ? [1, matchValue[1].tail.tail.tail.head[1].data, matchValue[1].tail.tail.head[1].data, matchValue[1].tail.head[1].data, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 2 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [2, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 3 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [3, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 4 ? [4] : matchValue[0].tag === 5 ? [5] : matchValue[0].tag === 6 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [6, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 7 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [7, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 8 ? [8] : matchValue[0].tag === 9 ? [9] : matchValue[0].tag === 10 ? [10] : matchValue[0].tag === 11 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [11, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 12 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [12, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 13 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [13, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 14 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [14, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 15 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [15, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 16 ? [16] : matchValue[0].tag === 17 ? [17] : matchValue[0].tag === 18 ? [18] : matchValue[0].tag === 19 ? [19] : matchValue[0].tag === 20 ? [20] : matchValue[0].tag === 21 ? [21] : matchValue[0].tag === 22 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [22, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 23 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail == null ? [23, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 24 ? [24] : matchValue[0].tag === 25 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 1 ? matchValue[1].head[1].tag === 0 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 2 ? matchValue[1].tail.head[1].tag === 0 ? matchValue[1].tail.tail.tail != null ? matchValue[1].tail.tail.head[0].tag === 3 ? matchValue[1].tail.tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail.tail != null ? matchValue[1].tail.tail.tail.head[0].tag === 4 ? matchValue[1].tail.tail.tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail.tail.tail == null ? [25, matchValue[1].tail.tail.tail.head[1].data, matchValue[1].head[1].data, matchValue[1].tail.tail.head[1].data, matchValue[1].tail.head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 26 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 9 ? matchValue[1].head[1].tag === 1 ? matchValue[1].tail.tail != null ? matchValue[1].tail.head[0].tag === 10 ? matchValue[1].tail.head[1].tag === 1 ? matchValue[1].tail.tail.tail == null ? [26, matchValue[1].head[1].data, matchValue[1].tail.head[1].data] : [44] : [44] : [44] : [44] : [44] : [44] : [44] : matchValue[0].tag === 27 ? [27] : matchValue[0].tag === 28 ? [28] : matchValue[0].tag === 29 ? [29] : matchValue[0].tag === 30 ? [30] : matchValue[0].tag === 31 ? [31] : matchValue[0].tag === 32 ? [32] : matchValue[0].tag === 33 ? [33] : matchValue[0].tag === 34 ? [34] : matchValue[0].tag === 35 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [35, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 36 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [36, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 37 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [37, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 38 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [38, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 39 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [39, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 40 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [40, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 41 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [41, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 42 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [42, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : matchValue[0].tag === 43 ? matchValue[1].tail != null ? matchValue[1].head[0].tag === 0 ? matchValue[1].head[1].tag === 2 ? matchValue[1].tail.tail == null ? [43, matchValue[1].head[1].data] : [44] : [44] : [44] : [44] : [0];

  switch ($var1[0]) {
    case 0:
      return normal();

    case 1:
      return rgba($var1[4].Value, $var1[3].Value, $var1[2].Value, $var1[1].Value);

    case 2:
      return saturate($var1[1].Value);

    case 3:
      return hueRotate($var1[1].Value);

    case 4:
      return luminanceToAlpha();

    case 5:
      return invert();

    case 6:
      return grayscale($var1[1].Value);

    case 7:
      return sepia($var1[1].Value);

    case 8:
      return nightvision();

    case 9:
      return warm();

    case 10:
      return cool();

    case 11:
      return brightness($var1[1].Value);

    case 12:
      return contrast($var1[1].Value);

    case 13:
      return temperature($var1[1].Value);

    case 14:
      return tint($var1[1].Value);

    case 15:
      return threshold($var1[1].Value);

    case 16:
      return technicolor();

    case 17:
      return polaroid();

    case 18:
      return toBGR();

    case 19:
      return kodachrome();

    case 20:
      return browni();

    case 21:
      return vintage();

    case 22:
      return night($var1[1].Value);

    case 23:
      return predator($var1[1].Value);

    case 24:
      return lsd();

    case 25:
      return colorTone($var1[2].Value, $var1[4].Value, $var1[3].Value, $var1[1].Value);

    case 26:
      return duoTone($var1[1].Value, $var1[2].Value);

    case 27:
      return protanomaly();

    case 28:
      return deuteranomaly();

    case 29:
      return tritanomaly();

    case 30:
      return protanopia();

    case 31:
      return deuteranopia();

    case 32:
      return tritanopia();

    case 33:
      return achromatopsia();

    case 34:
      return achromatomaly();

    case 35:
      return saturate($var1[1].Animated.Value);

    case 36:
      return hueRotate($var1[1].Animated.Value);

    case 37:
      return brightness($var1[1].Animated.Value);

    case 38:
      return contrast($var1[1].Animated.Value);

    case 39:
      return temperature($var1[1].Animated.Value);

    case 40:
      return tint($var1[1].Animated.Value);

    case 41:
      return threshold($var1[1].Animated.Value);

    case 42:
      return night($var1[1].Animated.Value);

    case 43:
      return predator($var1[1].Animated.Value);

    case 44:
      return normal();
  }
}
export function controls(_arg1) {
  return CurriedLambda((() => {
    switch (_arg1.tag) {
      case 1:
        const name_1 = name(new Model(1));
        return function (model, dispatch) {
          return controls_1(name_1, model, dispatch);
        };

      case 2:
        const name_2 = name(new Model(2));
        return function (model_1, dispatch_1) {
          return controls_1(name_2, model_1, dispatch_1);
        };

      case 3:
        const name_3 = name(new Model(3));
        return function (model_2, dispatch_2) {
          return controls_1(name_3, model_2, dispatch_2);
        };

      case 4:
        const name_4 = name(new Model(4));
        return function (model_3, dispatch_3) {
          return controls_1(name_4, model_3, dispatch_3);
        };

      case 5:
        const name_5 = name(new Model(5));
        return function (model_4, dispatch_4) {
          return controls_1(name_5, model_4, dispatch_4);
        };

      case 6:
        const name_6 = name(new Model(6));
        return function (model_5, dispatch_5) {
          return controls_1(name_6, model_5, dispatch_5);
        };

      case 7:
        const name_7 = name(new Model(7));
        return function (model_6, dispatch_6) {
          return controls_1(name_7, model_6, dispatch_6);
        };

      case 8:
        const name_8 = name(new Model(8));
        return function (model_7, dispatch_7) {
          return controls_1(name_8, model_7, dispatch_7);
        };

      case 9:
        const name_9 = name(new Model(9));
        return function (model_8, dispatch_8) {
          return controls_1(name_9, model_8, dispatch_8);
        };

      case 10:
        const name_10 = name(new Model(10));
        return function (model_9, dispatch_9) {
          return controls_1(name_10, model_9, dispatch_9);
        };

      case 11:
        const name_11 = name(new Model(11));
        return function (model_10, dispatch_10) {
          return controls_1(name_11, model_10, dispatch_10);
        };

      case 12:
        const name_12 = name(new Model(12));
        return function (model_11, dispatch_11) {
          return controls_1(name_12, model_11, dispatch_11);
        };

      case 13:
        const name_13 = name(new Model(13));
        return function (model_12, dispatch_12) {
          return controls_1(name_13, model_12, dispatch_12);
        };

      case 14:
        const name_14 = name(new Model(14));
        return function (model_13, dispatch_13) {
          return controls_1(name_14, model_13, dispatch_13);
        };

      case 15:
        const name_15 = name(new Model(15));
        return function (model_14, dispatch_14) {
          return controls_1(name_15, model_14, dispatch_14);
        };

      case 16:
        const name_16 = name(new Model(16));
        return function (model_15, dispatch_15) {
          return controls_1(name_16, model_15, dispatch_15);
        };

      case 17:
        const name_17 = name(new Model(17));
        return function (model_16, dispatch_16) {
          return controls_1(name_17, model_16, dispatch_16);
        };

      case 18:
        const name_18 = name(new Model(18));
        return function (model_17, dispatch_17) {
          return controls_1(name_18, model_17, dispatch_17);
        };

      case 19:
        const name_19 = name(new Model(19));
        return function (model_18, dispatch_18) {
          return controls_1(name_19, model_18, dispatch_18);
        };

      case 20:
        const name_20 = name(new Model(20));
        return function (model_19, dispatch_19) {
          return controls_1(name_20, model_19, dispatch_19);
        };

      case 21:
        const name_21 = name(new Model(21));
        return function (model_20, dispatch_20) {
          return controls_1(name_21, model_20, dispatch_20);
        };

      case 22:
        const name_22 = name(new Model(22));
        return function (model_21, dispatch_21) {
          return controls_1(name_22, model_21, dispatch_21);
        };

      case 23:
        const name_23 = name(new Model(23));
        return function (model_22, dispatch_22) {
          return controls_1(name_23, model_22, dispatch_22);
        };

      case 24:
        const name_24 = name(new Model(24));
        return function (model_23, dispatch_23) {
          return controls_1(name_24, model_23, dispatch_23);
        };

      case 25:
        const name_25 = name(new Model(25));
        return function (model_24, dispatch_24) {
          return controls_1(name_25, model_24, dispatch_24);
        };

      case 26:
        const name_26 = name(new Model(26));
        return function (model_25, dispatch_25) {
          return controls_1(name_26, model_25, dispatch_25);
        };

      case 27:
        const name_27 = name(new Model(27));
        return function (model_26, dispatch_26) {
          return controls_1(name_27, model_26, dispatch_26);
        };

      case 28:
        const name_28 = name(new Model(28));
        return function (model_27, dispatch_27) {
          return controls_1(name_28, model_27, dispatch_27);
        };

      case 29:
        const name_29 = name(new Model(29));
        return function (model_28, dispatch_28) {
          return controls_1(name_29, model_28, dispatch_28);
        };

      case 30:
        const name_30 = name(new Model(30));
        return function (model_29, dispatch_29) {
          return controls_1(name_30, model_29, dispatch_29);
        };

      case 31:
        const name_31 = name(new Model(31));
        return function (model_30, dispatch_30) {
          return controls_1(name_31, model_30, dispatch_30);
        };

      case 32:
        const name_32 = name(new Model(32));
        return function (model_31, dispatch_31) {
          return controls_1(name_32, model_31, dispatch_31);
        };

      case 33:
        const name_33 = name(new Model(33));
        return function (model_32, dispatch_32) {
          return controls_1(name_33, model_32, dispatch_32);
        };

      case 34:
        const name_34 = name(new Model(34));
        return function (model_33, dispatch_33) {
          return controls_1(name_34, model_33, dispatch_33);
        };

      case 35:
        const name_35 = name(new Model(35));
        return function (model_34, dispatch_34) {
          return controls_1(name_35, model_34, dispatch_34);
        };

      case 36:
        const name_36 = name(new Model(36));
        return function (model_35, dispatch_35) {
          return controls_1(name_36, model_35, dispatch_35);
        };

      case 37:
        const name_37 = name(new Model(37));
        return function (model_36, dispatch_36) {
          return controls_1(name_37, model_36, dispatch_36);
        };

      case 38:
        const name_38 = name(new Model(38));
        return function (model_37, dispatch_37) {
          return controls_1(name_38, model_37, dispatch_37);
        };

      case 39:
        const name_39 = name(new Model(39));
        return function (model_38, dispatch_38) {
          return controls_1(name_39, model_38, dispatch_38);
        };

      case 40:
        const name_40 = name(new Model(40));
        return function (model_39, dispatch_39) {
          return controls_1(name_40, model_39, dispatch_39);
        };

      case 41:
        const name_41 = name(new Model(41));
        return function (model_40, dispatch_40) {
          return controls_1(name_41, model_40, dispatch_40);
        };

      case 42:
        const name_42 = name(new Model(42));
        return function (model_41, dispatch_41) {
          return controls_1(name_42, model_41, dispatch_41);
        };

      case 43:
        const name_43 = name(new Model(43));
        return function (model_42, dispatch_42) {
          return controls_1(name_43, model_42, dispatch_42);
        };

      default:
        const name_44 = name(new Model(0));
        return function (model_43, dispatch_43) {
          return controls_1(name_44, model_43, dispatch_43);
        };
    }
  })());
}
export const availableFilters = [new Model(0), new Model(1), new Model(2), new Model(3), new Model(4), new Model(5), new Model(6), new Model(7), new Model(8), new Model(9), new Model(10), new Model(11), new Model(12), new Model(13), new Model(14), new Model(15), new Model(16), new Model(17), new Model(18), new Model(19), new Model(20), new Model(21), new Model(22), new Model(23), new Model(24), new Model(25), new Model(26), new Model(27), new Model(28), new Model(29), new Model(30), new Model(31), new Model(32), new Model(33), new Model(34)];
export const availableAnimatedFilters = [new Model(35), new Model(36), new Model(37), new Model(38), new Model(39), new Model(40), new Model(41), new Model(42), new Model(43)];