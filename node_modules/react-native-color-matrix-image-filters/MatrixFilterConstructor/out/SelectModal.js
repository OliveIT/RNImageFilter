import { setType } from "./fable-core/Symbol";
import _Symbol from "./fable-core/Symbol";
import { view as view_1, Message as Message_1 } from "./Select";
import { compareUnions, equals as equals_1, makeGeneric, GenericParam } from "./fable-core/Util";
import { Modal, InteractionManager } from "react-native";
import { map } from "./fable-core/Array";
import { createElement } from "react";
import { Platform } from "./fable/Fable.Helpers.ReactNative";
import { ofArray } from "./fable-core/List";
import { defaultArg } from "./fable-core/Option";
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.SelectModal.Message",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["Hide"], ["SelectMessage", makeGeneric(Message_1, {
        a: GenericParam("a")
      })]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals_1(this.data, other.data);
  }

  CompareTo(other) {
    return compareUnions(this, other) | 0;
  }

}
setType("MatrixFilterConstructor.SelectModal.Message", Message);
export class WithClose {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.SelectModal.WithClose",
      interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
      cases: [["Item", GenericParam("a")], ["Close"]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals_1(this.data, other.data);
  }

  CompareTo(other) {
    return compareUnions(this, other) | 0;
  }

}
setType("MatrixFilterConstructor.SelectModal.WithClose", WithClose);

function itemKeyWithClose(itemKey, _arg1) {
  if (_arg1.tag === 1) {
    return "‚ùå";
  } else {
    return itemKey(_arg1.data);
  }
}

function equalsWithClose(equals, first, second) {
  const matchValue = [first, second];
  const $var1 = matchValue[0].tag === 1 ? matchValue[1].tag === 1 ? [1] : [2] : matchValue[1].tag === 0 ? [0, matchValue[0].data, matchValue[1].data] : [2];

  switch ($var1[0]) {
    case 0:
      return equals($var1[1], $var1[2]);

    case 1:
      return true;

    case 2:
      return false;
  }
}

function dispatchWithClose(dispatch, _arg1) {
  var objectArg;

  if (_arg1.data.tag === 1) {
    dispatch(new Message(0));
  } else {
    dispatch(new Message(0));
    (objectArg = InteractionManager, objectArg.runAfterInteractions.bind(objectArg))(function () {
      return setTimeout(function () {
        dispatch(new Message(1, new Message_1(0, _arg1.data.data)));
      }, 50), void 0;
    }), void 0;
  }
}

export function view(items, selected, itemKey, equals, isVisible, dispatch) {
  const items_1 = map(function (arg0) {
    return new WithClose(0, arg0);
  }, items, Array);
  return createElement(Modal, {
    animationType: Platform.select(ofArray([new Platform.OS(0, "slide"), new Platform.OS(1, "fade")])),
    visible: isVisible,
    onRequestClose: function () {
      dispatch(new Message(0));
    }
  }, view_1(Platform.select(ofArray([new Platform.OS(1, items_1), new Platform.OS(0, items_1.concat([new WithClose(1)]))])), defaultArg(selected, null, function (arg0_1) {
    return new WithClose(0, arg0_1);
  }), function (_arg1) {
    return itemKeyWithClose(itemKey, _arg1);
  }, function (first, second) {
    return equalsWithClose(equals, first, second);
  }, function (_arg1_1) {
    dispatchWithClose(dispatch, _arg1_1);
  }));
}