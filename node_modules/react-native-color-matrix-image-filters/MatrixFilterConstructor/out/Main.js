import { setType } from "./fable-core/Symbol";
import _Symbol from "./fable-core/Symbol";
import { createObj, equals, equalsRecords, Tuple, Array as _Array } from "./fable-core/Util";
import { view as view_1, init as init_1, update as update_1, Message as Message_2, Model as Model_1 } from "./FilteredImage";
import { defaultImage, Model as Model_2 } from "./Image";
import { view as view_3, Message as Message_1 } from "./ImageSelectModal";
import { Cmd } from "./fable/cmd";
import { partition, collect, ofArray } from "./fable-core/List";
import List from "./fable-core/List";
import { Platform, Props, Alert } from "./fable/Fable.Helpers.ReactNative";
import { map } from "./fable-core/Array";
import { toList, iterate, tryFind } from "./fable-core/Seq";
import { getValue } from "./fable-core/Option";
import { join } from "./fable-core/String";
import { configureNextLayoutAnimation } from "./Utils";
import { Fragment, createElement } from "react";
import { FlatList, Button, View } from "react-native";
import CurriedLambda from "./fable-core/CurriedLambda";
import { view as view_2 } from "./Spacer";
import { WhitePortal, PortalProvider } from "react-native-portal";
import { imagePortal, animatedFilterPortal, commonFilterPortal } from "./Constants";
import { Common } from "./fable/common";
export class Model {
  constructor(filteredImages, defaultImageSelectModalIsVisible, defaultImage, animationNoticeWasShown, nextId) {
    this.FilteredImages = filteredImages;
    this.DefaultImageSelectModalIsVisible = defaultImageSelectModalIsVisible;
    this.DefaultImage = defaultImage;
    this.AnimationNoticeWasShown = animationNoticeWasShown;
    this.NextId = nextId | 0;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.Main.Model",
      interfaces: ["FSharpRecord", "System.IEquatable"],
      properties: {
        FilteredImages: _Array(Tuple(["number", Model_1])),
        DefaultImageSelectModalIsVisible: "boolean",
        DefaultImage: Model_2,
        AnimationNoticeWasShown: "boolean",
        NextId: "number"
      }
    };
  }

  Equals(other) {
    return equalsRecords(this, other);
  }

}
setType("MatrixFilterConstructor.Main.Model", Model);
export class Message {
  constructor(tag, data) {
    this.tag = tag | 0;
    this.data = data;
  }

  [_Symbol.reflection]() {
    return {
      type: "MatrixFilterConstructor.Main.Message",
      interfaces: ["FSharpUnion", "System.IEquatable"],
      cases: [["AddFilteredImage"], ["SelectDefaultImage"], ["ImageSelectModalMessage", Message_1], ["FilteredImageMessage", "number", Message_2], ["ContainerScrolled"], ["Tick"]]
    };
  }

  Equals(other) {
    return this === other || this.tag === other.tag && equals(this.data, other.data);
  }

}
setType("MatrixFilterConstructor.Main.Message", Message);
export function init() {
  return [new Model([], false, defaultImage, false, 0), Cmd.none()];
}
export function update(message, model) {
  var FilteredImages;
  var NextId;

  switch (message.tag) {
    case 1:
      return [new Model(model.FilteredImages, true, model.DefaultImage, model.AnimationNoticeWasShown, model.NextId), new List()];

    case 2:
      if (message.data.tag === 3) {
        return [model, new List()];
      } else if (message.data.tag === 2) {
        Alert.alert("Error", message.data.data, new List());
        return [model, new List()];
      } else if (message.data.tag === 0) {
        return [new Model(model.FilteredImages, false, model.DefaultImage, model.AnimationNoticeWasShown, model.NextId), new List()];
      } else {
        return [new Model(model.FilteredImages, model.DefaultImageSelectModalIsVisible, message.data.data, model.AnimationNoticeWasShown, model.NextId), Cmd.batch(map(function (tupledArg) {
          return Cmd.map(function (sub) {
            return new Message(3, [tupledArg[0], sub]);
          }, Cmd.ofMsg(new Message_2(2, message.data.data)));
        }, model.FilteredImages, Array))];
      }

    case 3:
      const matchValue = tryFind(function (tupledArg_1) {
        return tupledArg_1[0] === message.data[0];
      }, model.FilteredImages);

      if (matchValue != null) {
        const image = getValue(matchValue)[1];
        const $var1 = message.data[1].tag === 5 ? !model.AnimationNoticeWasShown ? [0] : [1] : [1];

        switch ($var1[0]) {
          case 0:
            return [new Model(model.FilteredImages, model.DefaultImageSelectModalIsVisible, model.DefaultImage, true, model.NextId), Cmd.ofPromise(function () {
              return new Promise(function (resolve, reject) {
                Alert.alertWithOptions("Notice", join("", ofArray(["Animated filters here are implemented with 'requestAnimationFrame', so it ", "may lead to slow performance and increased energy consumption on some ", "devices."])), ofArray([["OK", resolve]]), ofArray([new Alert.Options(1, resolve)]));
              });
            }, null, function () {
              return new Message(3, [message.data[0], message.data[1]]);
            }, function (_arg4) {
              return new Message(3, [message.data[0], message.data[1]]);
            })];

          case 1:
            if (message.data[1].tag === 0) {
              configureNextLayoutAnimation();
              return [new Model(model.FilteredImages.filter(function (tupledArg_2) {
                return tupledArg_2[0] !== message.data[0];
              }), model.DefaultImageSelectModalIsVisible, model.DefaultImage, model.AnimationNoticeWasShown, model.NextId), new List()];
            } else {
              const patternInput = update_1(message.data[1], image);
              return [new Model(map(function (tupledArg_3) {
                return [tupledArg_3[0], tupledArg_3[0] === message.data[0] ? patternInput[0] : tupledArg_3[1]];
              }, model.FilteredImages, Array), model.DefaultImageSelectModalIsVisible, model.DefaultImage, model.AnimationNoticeWasShown, model.NextId), Cmd.map(function (sub_1) {
                return new Message(3, [message.data[0], sub_1]);
              }, patternInput[1])];
            }

        }
      } else {
        return [model, new List()];
      }

    case 4:
      iterate(function (_arg1) {
        const $var2 = _arg1[1].tag === 1 ? _arg1[1].data.ColorWheelRef != null ? [0, getValue(_arg1[1].data.ColorWheelRef)] : [1] : [1];

        switch ($var2[0]) {
          case 0:
            $var2[1].measureOffset();
            break;

          case 1:
            break;
        }
      }, collect(function (tupledArg_4) {
        return tupledArg_4[2];
      }, collect(function (tupledArg_5) {
        return tupledArg_5[1].Filters;
      }, toList(model.FilteredImages))));
      return [model, new List()];

    case 5:
      return [model, Cmd.batch(map(function (tupledArg_6) {
        return Cmd.map(function (sub_2) {
          return new Message(3, [tupledArg_6[0], sub_2]);
        }, Cmd.ofMsg(new Message_2(13)));
      }, model.FilteredImages, Array))];

    default:
      configureNextLayoutAnimation();
      const newImage = init_1(model.DefaultImage);
      return [(FilteredImages = [[model.NextId, newImage]].concat(model.FilteredImages), NextId = model.NextId + 1 | 0, new Model(FilteredImages, model.DefaultImageSelectModalIsVisible, model.DefaultImage, model.AnimationNoticeWasShown, NextId)), new List()];
  }
}
export function subscribe(_model) {
  const sub = function (dispatch) {
    const animate = function (_dt) {
      window.requestAnimationFrame(animate), void 0;
      dispatch(new Message(5));
    };

    animate(0);
  };

  return Cmd.ofSub(sub);
}
const separatorStyle = new Props.ViewProperties(8, ofArray([new Props.FlexStyle(20, 1.5)]));
const listContentStyle = new Props.FlatListProperties(5, ofArray([new Props.FlexStyle(37, 1.5 + "%"), new Props.FlexStyle(44, Platform.select(ofArray([new Platform.OS(0, 25), new Platform.OS(1, 5)])))]));
const listStyle = new Props.FlatListProperties(22, ofArray([new Props.ImageStyle(4, "wheat")]));
export function separator() {
  return createElement(View, createObj(ofArray([separatorStyle]), 1));
}
export function view(model, dispatch) {
  var patternInput;

  const filteredImageDispatch = function (i, msg) {
    dispatch(new Message(3, [i, msg]));
  };

  const renderFilteredImage = function (tupledArg) {
    return view_1(tupledArg[1], CurriedLambda(filteredImageDispatch)(tupledArg[0]));
  };

  const listControls = function () {
    return createElement(Fragment, {}, createElement(Button, {
      title: "Change all images",
      color: "green",
      onPress: function () {
        dispatch(new Message(1));
      }
    }), view_2, createElement(Button, {
      title: "Add filtered image",
      color: "green",
      onPress: function () {
        dispatch(new Message(0));
      }
    }));
  };

  return createElement(PortalProvider, {}, view_3(model.DefaultImage, model.DefaultImageSelectModalIsVisible, $var3 => dispatch(function (arg0) {
    return new Message(2, arg0);
  }($var3))), function (name, children) {
    return createElement(WhitePortal, {
      name: name
    }, ...children);
  }(commonFilterPortal, new List()), function (name_1, children_1) {
    return createElement(WhitePortal, {
      name: name_1
    }, ...children_1);
  }(animatedFilterPortal, new List()), function (name_2, children_2) {
    return createElement(WhitePortal, {
      name: name_2
    }, ...children_2);
  }(imagePortal, new List()), (patternInput = partition(function (_arg1_1) {
    switch (_arg1_1.tag) {
      case 0:
        return true;

      case 1:
        return true;

      case 2:
        return true;

      case 3:
        return true;

      default:
        return false;
    }
  }, ofArray([listContentStyle, listStyle, new Props.FlatListProperties(20, function (item) {
    return Common.lazyView(renderFilteredImage)(item.item);
  }), new Props.FlatListProperties(0, separator), new Props.FlatListProperties(3, listControls), new Props.ScrollViewProperties(8, function (_arg1) {
    dispatch(new Message(4));
  }), new Props.ScrollViewProperties(6, function (_arg2) {
    dispatch(new Message(4));
  }), new Props.FlatListProperties(11, function (tupledArg_1, _arg3) {
    return tupledArg_1[0].toString();
  })])), createElement(FlatList, Object.assign({
    data: model.FilteredImages
  }, createObj(patternInput[1], 1), createObj(patternInput[0], 0)))));
}
export const pureView = CurriedLambda(Common.lazyView2(view));